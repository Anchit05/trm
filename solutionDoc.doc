User Story 1 (Wei to Eth) - Solution:

- Initially, I reviewed the provided links to find information about converting Wei to Eth.
- Next, I explored the documentation of BigNumber.js to identify relevant methods for this 
  conversion.
- Upon analyzing the component, I examined how the address data was structured. The addresses data 
  was in the form of an array of objects, with each object containing 'address' and 'balance' keys.
- To format the 'balance' key in the addresses data, I created a 'weiToEther' function that 
  handles the conversion. I placed this function in a helper file to make it accessible 
  throughout the project.

User Story 2 (Refactor Saga) - Solution:

- I began by searching for code repetitions and aimed to consolidate them into a single function.
- I reduced the number of API call functions to enhance modularity, making it easier to add more 
  functions in the future without concerns about the underlying logic.
- I created an 'apiRequest' function in a separate file to allow its reuse across multiple sagas.

User Story 3 (Validating ETH Address) - Solution:

- I examined the documentation provided in the links and configured the necessary packages 
  and webpack settings.
- I validated that the address validation function was functioning correctly.
- I referred to the Ant Design documentation to learn how to apply multiple validations to a Form
  input and implemented the solution accordingly.
- I developed a common 'isAddressField' function that can be used universally across the project 
  to validate various types of addresses.

User Story 4 (Pagination for Transactions Table) - Solution:

- Initially, I assessed the data flow and the parameters used to retrieve the transaction list.
- I observed that the 'page' parameter was employed to retrieve data, so I passed the 'pageVal' 
  from the component to fetch the next page values.
- Due to the unknown total number of transactions, I implemented lazy loading. I added a 
  "Load More" button that, when clicked, fetches the next 10 records. If no more records are 
  available, the button is removed.

User Story 5 (Updation of URL and Data Fetching) - Solution:

- The first challenge I encountered was that the URL wasn't functioning correctly, which required
  adjustments in webpack to resolve. I researched the issue and applied the necessary fixes.
- Another challenge was updating the URL when a user searches for an address, without causing 
  React to trigger a re-render. This was essential to ensure that only the necessary data was
  fetched when the URL changed. I addressed this by using JavaScript to update the URL accordingly.
- I made modifications to the components by reading the URL parameters and managing the API calls 
  to display the data. Additionally, I handled scenarios where an incorrect address in the URL 
  triggers an alert.
